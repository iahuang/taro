import { TaroStateObject, TaroBaseMutableState } from "./core";
import { TaroReactiveState } from "./reactive";

type TaroJSXRepresentable =
    | string
    | null
    | undefined
    | number
    | Array<TaroJSXRepresentable>
    | HTMLElement
    | TaroStateObject<TaroJSXRepresentable>;

function assertInstanceOf<T>(obj: any, t: new (...args: any[]) => T, message: string) {
    if (!(obj instanceof t)) {
        throw new Error(message);
    }
}

export class __TaroReact {
    /*
        A class that implements a subset of the React object. Used to define React calls
        generated by the Typescript JSX generator.
    */

    // domBindings = new Map<Node, TaroStateObject<any>>();

    _createNodeBinding<T>(node: ChildNode, obj: TaroStateObject<T>) {
        //this.domBindings.set(node, obj);
        let dependsOn: TaroBaseMutableState<any>[];
        if (obj instanceof TaroReactiveState) {
            dependsOn = this.getTopLevelDependencies(obj);
        } else if (obj instanceof TaroBaseMutableState) {
            dependsOn = [obj];
        } else {
            throw new Error("");
        }
        for (let dep of dependsOn) {
            dep.subscribeFromNode(node, (v) => {
                let newNode = this._toDOMNode(obj.getValue());
                this._createNodeBinding(newNode, obj);
                node.replaceWith(newNode);
            });
        }
    }

    _garbageCollect() {}

    _toDOMNode(obj: TaroJSXRepresentable): ChildNode {
        if (typeof obj === "string") {
            return document.createTextNode(obj);
        }
        if (typeof obj === "bigint" || typeof obj === "number" || typeof obj === "boolean") {
            return document.createTextNode(obj.toString());
        }
        if (obj === null || obj === undefined) {
            return document.createTextNode("");
        }
        if (obj instanceof HTMLElement) {
            return obj;
        }
        if (obj instanceof TaroStateObject) {
            let node = this._toDOMNode(obj.getValue());
            this._createNodeBinding(node, obj);
            return node;
        }

        throw new Error(`Cannot represent object ${obj} as a DOM Node`);
    }

    getTopLevelDependencies<T>(stateObj: TaroReactiveState<T>) {
        let all: TaroBaseMutableState<any>[] = [];
        this._getTLDep(stateObj, all);
        return all;
    }

    _getTLDep<T>(obj: TaroReactiveState<T>, all: TaroBaseMutableState<any>[]): void {
        for (let d of obj.dependencies) {
            if (d instanceof TaroStateObject) {
                if (d instanceof TaroBaseMutableState) {
                    all.push(d);
                } else if (d instanceof TaroReactiveState) {
                    this._getTLDep(d, all);
                }
            }
        }
    }

    createElement(tagName: string, args: Record<string, any> | null, ...children: TaroJSXRepresentable[]) {
        let el = document.createElement(tagName);
        for (let [argName, value] of Object.entries(args || {})) {
            // hack to check for an event listener tag like "onClick"
            // and add it as an eventListener instead of an html tag
            if (argName.match(/on[A-Z]/)) {
                let ev = argName.substring(2).toLowerCase();
                assertInstanceOf(value, Function, "Event listeners must be a function.");
                el.addEventListener(ev, value);
                continue;
            }
            el.setAttribute(argName, value);
        }
        for (let child of children) {
            let node = this._toDOMNode(child);
            if (node) el.appendChild(node);
        }
        return el;
    }
}
